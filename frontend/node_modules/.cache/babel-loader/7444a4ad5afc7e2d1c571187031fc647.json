{"ast":null,"code":"import axios from \"axios\";\nimport { NOTES_CREATE_FAIL, NOTES_CREATE_REQUEST, NOTES_CREATE_SUCCESS, NOTES_DELETE_FAIL, NOTES_DELETE_REQUEST, NOTES_DELETE_SUCCESS, NOTES_LIST_FAIL, NOTES_LIST_REQUEST, NOTES_LIST_SUCCESS, NOTES_UPDATE_FAIL, NOTES_UPDATE_REQUEST, NOTES_UPDATE_SUCCESS } from \"../constants/notesConstatns\";\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      //in dispatch we are disparching the action NOTES_LIST_REQUEST, its going to send loading to true\n      type: NOTES_LIST_REQUEST\n    }); //fetching user info from the state with getState actions\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/notes`, config);\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message\n    });\n  }\n}; //4. action for creating note\n\nexport const createNoteAction = (title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        //for what type of contetn we are sending the data.. JSON file\n        \"Content-Type\": \"application/json\",\n        //authorization we make with bearer token\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //we are making api call from /api/notes/create, we are sending title, conent, category that we recived from the user to the backend then we are passing config object wich created on line 60.\n\n    const {\n      data\n    } = await axios.post(`/api/notes/create`, {\n      title,\n      content,\n      category\n    }, config); //in this area if const {data} is succes if it doesnt fail it going to fire of NOTES CREATE SUCCESS its going to pass data to payload\n\n    dispatch({\n      type: NOTES_CREATE_SUCCESS,\n      payload: data\n    }); //otherwise its goint to throw a error\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_CREATE_FAIL,\n      payload: message\n    });\n  }\n}; //then we are goingt to create route for createNote in App.js\n\nexport const updateNoteAction = (id, title, content, category) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/notes/${id}`, {\n      title,\n      content,\n      category\n    }, config);\n    dispatch({\n      type: NOTES_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteNoteAction = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/notes/${id}`, config);\n    dispatch({\n      type: NOTES_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_DELETE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"names":["axios","NOTES_CREATE_FAIL","NOTES_CREATE_REQUEST","NOTES_CREATE_SUCCESS","NOTES_DELETE_FAIL","NOTES_DELETE_REQUEST","NOTES_DELETE_SUCCESS","NOTES_LIST_FAIL","NOTES_LIST_REQUEST","NOTES_LIST_SUCCESS","NOTES_UPDATE_FAIL","NOTES_UPDATE_REQUEST","NOTES_UPDATE_SUCCESS","listNotes","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","message","response","createNoteAction","title","content","category","post","updateNoteAction","id","put","deleteNoteAction","delete"],"sources":["/home/sdrlochi/Desktop/Projects/Works/Finished Project/noteapp/frontend/src/actions/notesActions.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n  NOTES_CREATE_FAIL,\n  NOTES_CREATE_REQUEST,\n  NOTES_CREATE_SUCCESS,\n  NOTES_DELETE_FAIL,\n  NOTES_DELETE_REQUEST,\n  NOTES_DELETE_SUCCESS,\n  NOTES_LIST_FAIL,\n  NOTES_LIST_REQUEST,\n  NOTES_LIST_SUCCESS,\n  NOTES_UPDATE_FAIL,\n  NOTES_UPDATE_REQUEST,\n  NOTES_UPDATE_SUCCESS,\n} from \"../constants/notesConstatns\";\n\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      //in dispatch we are disparching the action NOTES_LIST_REQUEST, its going to send loading to true\n      type: NOTES_LIST_REQUEST,\n    });\n\n    //fetching user info from the state with getState actions\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/notes`, config);\n\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message,\n    });\n  }\n};\n\n//4. action for creating note\n\nexport const createNoteAction =\n  (title, content, category) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: NOTES_CREATE_REQUEST,\n      });\n\n      const {\n        userLogin: { userInfo },\n      } = getState();\n\n      const config = {\n        headers: {\n          //for what type of contetn we are sending the data.. JSON file\n          \"Content-Type\": \"application/json\",\n          //authorization we make with bearer token\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      };\n\n      //we are making api call from /api/notes/create, we are sending title, conent, category that we recived from the user to the backend then we are passing config object wich created on line 60.\n      const { data } = await axios.post(\n        `/api/notes/create`,\n        { title, content, category },\n        config\n      );\n\n      //in this area if const {data} is succes if it doesnt fail it going to fire of NOTES CREATE SUCCESS its going to pass data to payload\n      dispatch({\n        type: NOTES_CREATE_SUCCESS,\n        payload: data,\n      });\n\n      //otherwise its goint to throw a error\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({\n        type: NOTES_CREATE_FAIL,\n        payload: message,\n      });\n    }\n  }; //then we are goingt to create route for createNote in App.js\n\nexport const updateNoteAction =\n  (id, title, content, category) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: NOTES_UPDATE_REQUEST,\n      });\n\n      const {\n        userLogin: { userInfo },\n      } = getState();\n\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      };\n\n      const { data } = await axios.put(\n        `/api/notes/${id}`,\n        { title, content, category },\n        config\n      );\n\n      dispatch({\n        type: NOTES_UPDATE_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({\n        type: NOTES_UPDATE_FAIL,\n        payload: message,\n      });\n    }\n  };\n\nexport const deleteNoteAction = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NOTES_DELETE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.delete(`/api/notes/${id}`, config);\n\n    dispatch({\n      type: NOTES_DELETE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({\n      type: NOTES_DELETE_FAIL,\n      payload: message,\n    });\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,oBANF,EAOEC,eAPF,EAQEC,kBARF,EASEC,kBATF,EAUEC,iBAVF,EAWEC,oBAXF,EAYEC,oBAZF,QAaO,6BAbP;AAeA,OAAO,MAAMC,SAAS,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EAC3D,IAAI;IACFD,QAAQ,CAAC;MACP;MACAE,IAAI,EAAER;IAFC,CAAD,CAAR,CADE,CAMF;;IACA,MAAM;MACJS,SAAS,EAAE;QAAEC;MAAF;IADP,IAEFH,QAAQ,EAFZ;IAIA,MAAMI,MAAM,GAAG;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MADjC;IADI,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAMvB,KAAK,CAACwB,GAAN,CAAW,YAAX,EAAwBL,MAAxB,CAAvB;IAEAL,QAAQ,CAAC;MACPE,IAAI,EAAEP,kBADC;MAEPgB,OAAO,EAAEF;IAFF,CAAD,CAAR;EAID,CAvBD,CAuBE,OAAOG,KAAP,EAAc;IACd,MAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;IAIAb,QAAQ,CAAC;MACPE,IAAI,EAAET,eADC;MAEPkB,OAAO,EAAEE;IAFF,CAAD,CAAR;EAID;AACF,CAlCM,C,CAoCP;;AAEA,OAAO,MAAME,gBAAgB,GAC3B,CAACC,KAAD,EAAQC,OAAR,EAAiBC,QAAjB,KAA8B,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;EAC1D,IAAI;IACFD,QAAQ,CAAC;MACPE,IAAI,EAAEd;IADC,CAAD,CAAR;IAIA,MAAM;MACJe,SAAS,EAAE;QAAEC;MAAF;IADP,IAEFH,QAAQ,EAFZ;IAIA,MAAMI,MAAM,GAAG;MACbC,OAAO,EAAE;QACP;QACA,gBAAgB,kBAFT;QAGP;QACAC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MAJjC;IADI,CAAf,CATE,CAkBF;;IACA,MAAM;MAAEC;IAAF,IAAW,MAAMvB,KAAK,CAACiC,IAAN,CACpB,mBADoB,EAErB;MAAEH,KAAF;MAASC,OAAT;MAAkBC;IAAlB,CAFqB,EAGrBb,MAHqB,CAAvB,CAnBE,CAyBF;;IACAL,QAAQ,CAAC;MACPE,IAAI,EAAEb,oBADC;MAEPsB,OAAO,EAAEF;IAFF,CAAD,CAAR,CA1BE,CA+BF;EACD,CAhCD,CAgCE,OAAOG,KAAP,EAAc;IACd,MAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;IAIAb,QAAQ,CAAC;MACPE,IAAI,EAAEf,iBADC;MAEPwB,OAAO,EAAEE;IAFF,CAAD,CAAR;EAID;AACF,CA5CI,C,CA4CF;;AAEL,OAAO,MAAMO,gBAAgB,GAC3B,CAACC,EAAD,EAAKL,KAAL,EAAYC,OAAZ,EAAqBC,QAArB,KAAkC,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;EAC9D,IAAI;IACFD,QAAQ,CAAC;MACPE,IAAI,EAAEL;IADC,CAAD,CAAR;IAIA,MAAM;MACJM,SAAS,EAAE;QAAEC;MAAF;IADP,IAEFH,QAAQ,EAFZ;IAIA,MAAMI,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MAFjC;IADI,CAAf;IAOA,MAAM;MAAEC;IAAF,IAAW,MAAMvB,KAAK,CAACoC,GAAN,CACpB,cAAaD,EAAG,EADI,EAErB;MAAEL,KAAF;MAASC,OAAT;MAAkBC;IAAlB,CAFqB,EAGrBb,MAHqB,CAAvB;IAMAL,QAAQ,CAAC;MACPE,IAAI,EAAEJ,oBADC;MAEPa,OAAO,EAAEF;IAFF,CAAD,CAAR;EAID,CA1BD,CA0BE,OAAOG,KAAP,EAAc;IACd,MAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;IAIAb,QAAQ,CAAC;MACPE,IAAI,EAAEN,iBADC;MAEPe,OAAO,EAAEE;IAFF,CAAD,CAAR;EAID;AACF,CAtCI;AAwCP,OAAO,MAAMU,gBAAgB,GAAIF,EAAD,IAAQ,OAAOrB,QAAP,EAAiBC,QAAjB,KAA8B;EACpE,IAAI;IACFD,QAAQ,CAAC;MACPE,IAAI,EAAEX;IADC,CAAD,CAAR;IAIA,MAAM;MACJY,SAAS,EAAE;QAAEC;MAAF;IADP,IAEFH,QAAQ,EAFZ;IAIA,MAAMI,MAAM,GAAG;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MADjC;IADI,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAMvB,KAAK,CAACsC,MAAN,CAAc,cAAaH,EAAG,EAA9B,EAAiChB,MAAjC,CAAvB;IAEAL,QAAQ,CAAC;MACPE,IAAI,EAAEV,oBADC;MAEPmB,OAAO,EAAEF;IAFF,CAAD,CAAR;EAID,CArBD,CAqBE,OAAOG,KAAP,EAAc;IACd,MAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;IAIAb,QAAQ,CAAC;MACPE,IAAI,EAAEZ,iBADC;MAEPqB,OAAO,EAAEE;IAFF,CAAD,CAAR;EAID;AACF,CAhCM"},"metadata":{},"sourceType":"module"}