{"ast":null,"code":"import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\nimport axios from \"axios\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password, pic) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users\", {\n      name,\n      pic,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","pic"],"sources":["/home/sdrlochi/Desktop/notezipper/frontend/src/actions/userActions.js"],"sourcesContent":["\n\nimport {\n    USER_LOGIN_FAIL,\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGOUT,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n  } from \"../constants/userConstants\";\n  import axios from \"axios\";\n  \n  export const login = (email, password) => async (dispatch) => {\n    try {\n      dispatch({ type: USER_LOGIN_REQUEST });\n  \n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n  \n      const { data } = await axios.post(\n        \"/api/users/login\",\n        { email, password },\n        config\n      );\n  \n      dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n  \n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n  \n  export const logout = () => async (dispatch) => {\n    localStorage.removeItem(\"userInfo\");\n    dispatch({ type: USER_LOGOUT });\n  };\n  \n  export const register = (name, email, password, pic) => async (dispatch) => {\n    try {\n      dispatch({ type: USER_REGISTER_REQUEST });\n  \n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n  \n      const { data } = await axios.post(\n        \"/api/users\",\n        { name, pic, email, password },\n        config\n      );\n  \n      dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n  \n      dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n  \n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };"],"mappings":"AAEA,SACIA,eADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,WAJJ,EAKIC,kBALJ,EAMIC,qBANJ,EAOIC,qBAPJ,QAQS,4BART;AASE,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;EAC5D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEX;IAAR,CAAD,CAAR;IAEA,MAAMY,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,gBAAgB;MADT;IADI,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAMR,KAAK,CAACS,IAAN,CACrB,kBADqB,EAErB;MAAEP,KAAF;MAASC;IAAT,CAFqB,EAGrBG,MAHqB,CAAvB;IAMAF,QAAQ,CAAC;MAAEC,IAAI,EAAEV,kBAAR;MAA4Be,OAAO,EAAEF;IAArC,CAAD,CAAR;IAEAG,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;EACD,CAlBD,CAkBE,OAAOO,KAAP,EAAc;IACdX,QAAQ,CAAC;MACPC,IAAI,EAAEZ,eADC;MAEPiB,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;IALL,CAAD,CAAR;EAOD;AACF,CA5BM;AA8BP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOd,QAAP,IAAoB;EAC9CO,YAAY,CAACQ,UAAb,CAAwB,UAAxB;EACAf,QAAQ,CAAC;IAAEC,IAAI,EAAET;EAAR,CAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMwB,QAAQ,GAAG,CAACC,IAAD,EAAOnB,KAAP,EAAcC,QAAd,EAAwBmB,GAAxB,KAAgC,MAAOlB,QAAP,IAAoB;EAC1E,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEP;IAAR,CAAD,CAAR;IAEA,MAAMQ,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,gBAAgB;MADT;IADI,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAMR,KAAK,CAACS,IAAN,CACrB,YADqB,EAErB;MAAEY,IAAF;MAAQC,GAAR;MAAapB,KAAb;MAAoBC;IAApB,CAFqB,EAGrBG,MAHqB,CAAvB;IAMAF,QAAQ,CAAC;MAAEC,IAAI,EAAEN,qBAAR;MAA+BW,OAAO,EAAEF;IAAxC,CAAD,CAAR;IAEAJ,QAAQ,CAAC;MAAEC,IAAI,EAAEV,kBAAR;MAA4Be,OAAO,EAAEF;IAArC,CAAD,CAAR;IAEAG,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;EACD,CApBD,CAoBE,OAAOO,KAAP,EAAc;IACdX,QAAQ,CAAC;MACPC,IAAI,EAAER,kBADC;MAEPa,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;IALL,CAAD,CAAR;EAOD;AACF,CA9BM"},"metadata":{},"sourceType":"module"}