{"ast":null,"code":"import axios from \"axios\";\nimport { NOTES_LIST_FAIL, NOTES_LIST_REQUEST, NOTES_LIST_SUCCESS } from \"../constants/notesConstatns\";\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      //in dispatch we are disparching the action NOTES_LIST_REQUEST, its going to send loading to true\n      type: NOTES_LIST_REQUEST\n    }); //fetching user info from the state with getState actions\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/notes`, config);\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"names":["axios","NOTES_LIST_FAIL","NOTES_LIST_REQUEST","NOTES_LIST_SUCCESS","listNotes","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","message","response"],"sources":["/home/sdrlochi/Desktop/notezipper/frontend/src/actions/notesActions.js"],"sourcesContent":["import axios from \"axios\";\nimport { NOTES_LIST_FAIL, NOTES_LIST_REQUEST, NOTES_LIST_SUCCESS } from \"../constants/notesConstatns\";\n\nexport const listNotes = () => async (dispatch, getState) => {\n  try {\n    dispatch({//in dispatch we are disparching the action NOTES_LIST_REQUEST, its going to send loading to true\n      type: NOTES_LIST_REQUEST,\n    });\n\n    //fetching user info from the state with getState actions\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/notes`, config);\n\n    dispatch({\n      type: NOTES_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({\n      type: NOTES_LIST_FAIL,\n      payload: message,\n    });\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,QAAwE,6BAAxE;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EAC3D,IAAI;IACFD,QAAQ,CAAC;MAAC;MACRE,IAAI,EAAEL;IADC,CAAD,CAAR,CADE,CAKF;;IACA,MAAM;MACJM,SAAS,EAAE;QAAEC;MAAF;IADP,IAEFH,QAAQ,EAFZ;IAIA,MAAMI,MAAM,GAAG;MACbC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;MADjC;IADI,CAAf;IAMA,MAAM;MAAEC;IAAF,IAAW,MAAMd,KAAK,CAACe,GAAN,CAAW,YAAX,EAAwBL,MAAxB,CAAvB;IAEAL,QAAQ,CAAC;MACPE,IAAI,EAAEJ,kBADC;MAEPa,OAAO,EAAEF;IAFF,CAAD,CAAR;EAID,CAtBD,CAsBE,OAAOG,KAAP,EAAc;IACd,MAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeL,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;IAIAb,QAAQ,CAAC;MACPE,IAAI,EAAEN,eADC;MAEPe,OAAO,EAAEE;IAFF,CAAD,CAAR;EAID;AACF,CAjCM"},"metadata":{},"sourceType":"module"}